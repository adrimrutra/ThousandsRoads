//------------------------------------------------------------------------------
// CacheProvider version: 2013.1.3.702
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ThousandsRoads {
    
    
    /// <summary>
    /// Projection of class ThousandsRoads.Comment
    /// </summary>
    public partial class Comment : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "ThousandsRoads.Comment";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 14993;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(33);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(7);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Comment() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("ThousandsRoads.Comment", typeof(Comment));
            ;
            ThousandsRoads.Comment.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Data", InterSystems.Data.CacheTypes.ClientTypeId.tDate, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 55874));
            ThousandsRoads.Comment.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Message", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Comment.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Messenger", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 27386));
            ThousandsRoads.Comment.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("MessengerId", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Comment.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Type", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Comment.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("User", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 27386));
            ThousandsRoads.Comment.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("UserId", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ;
            ThousandsRoads.Comment.CheckSumMethodDict.Add("%ComposeOid", 26212);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("%DeleteExtent", 16541);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("%IsA", 55457);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("%SaveIndices", 40887);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("DataDisplayToLogical", 46780);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("DataIsValid", 31698);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("DataLogicalToDisplay", 33171);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("IDKEYDelete", 22132);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("IDKEYExists", 25395);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("IDKEYOpen", 49257);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("MessageDisplayToLogical", 5545);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("MessageIsValid", 31698);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("MessageLogicalToDisplay", 5545);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("MessengerGetObject", 64492);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("MessengerGetObjectId", 17297);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("MessengerIdDisplayToLogical", 50961);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("MessengerIdIsValid", 31698);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("MessengerIdLogicalToDisplay", 58023);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("MessengerIsValid", 57396);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("MessengerSetObject", 32506);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("MessengerSetObjectId", 50028);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("TypeDisplayToLogical", 50961);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("TypeIsValid", 31698);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("TypeLogicalToDisplay", 58023);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("UserGetObject", 64492);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("UserGetObjectId", 17297);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("UserIdDisplayToLogical", 50961);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("UserIdIsValid", 31698);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("UserIdLogicalToDisplay", 58023);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("UserIsValid", 57396);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("UserSetObject", 32506);
            ThousandsRoads.Comment.CheckSumMethodDict.Add("UserSetObjectId", 50028);
            ;
            ThousandsRoads.Comment.CheckSumQueryDict.Add("Extent", 19298);
        }
        
        /// <summary>Internal API</summary>
        public Comment() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Comment(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, ThousandsRoads.Comment.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Comment(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, ThousandsRoads.Comment.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Data
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheDate Data {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                        this.GetPropertyS("Data", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                        this.SetPropertyS("Data", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Message
        /// </summary>
        public virtual string Message {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Message", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Message", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Messenger
        /// </summary>
        public virtual ThousandsRoads.Customer Messenger {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(ThousandsRoads.Customer));
                        this.GetPropertyS("Messenger", mtdSignature);
                        return ((ThousandsRoads.Customer)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Messenger", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property MessengerId
        /// </summary>
        public virtual System.Nullable<long> MessengerId {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("MessengerId", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("MessengerId", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Type
        /// </summary>
        public virtual System.Nullable<long> Type {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Type", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Type", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property User
        /// </summary>
        public virtual ThousandsRoads.Customer User {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(ThousandsRoads.Customer));
                        this.GetPropertyS("User", mtdSignature);
                        return ((ThousandsRoads.Customer)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("User", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property UserId
        /// </summary>
        public virtual System.Nullable<long> UserId {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("UserId", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("UserId", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DataDisplayToLogical
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheDate DataDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "DataDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DataIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DataIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "DataIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DataLogicalToDisplay
        /// </summary>
        public static string DataLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, InterSystems.Data.CacheTypes.CacheDate _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "DataLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static ThousandsRoads.Comment IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(ThousandsRoads.Comment));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((ThousandsRoads.Comment)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessageDisplayToLogical
        /// </summary>
        public static string MessageDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "MessageDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessageIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus MessageIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "MessageIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessageLogicalToDisplay
        /// </summary>
        public static string MessageLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "MessageLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessengerGetObject
        /// </summary>
        public virtual byte[] MessengerGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("MessengerGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method MessengerGetObjectId
        /// </summary>
        public virtual string MessengerGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("MessengerGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method MessengerIdDisplayToLogical
        /// </summary>
        public static System.Nullable<long> MessengerIdDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "MessengerIdDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessengerIdIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus MessengerIdIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "MessengerIdIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessengerIdLogicalToDisplay
        /// </summary>
        public static string MessengerIdLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "MessengerIdLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessengerIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus MessengerIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "MessengerIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessengerSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus MessengerSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("MessengerSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method MessengerSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus MessengerSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("MessengerSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TypeDisplayToLogical
        /// </summary>
        public static System.Nullable<long> TypeDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "TypeDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TypeIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TypeIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "TypeIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TypeLogicalToDisplay
        /// </summary>
        public static string TypeLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "TypeLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserGetObject
        /// </summary>
        public virtual byte[] UserGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("UserGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method UserGetObjectId
        /// </summary>
        public virtual string UserGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("UserGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method UserIdDisplayToLogical
        /// </summary>
        public static System.Nullable<long> UserIdDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "UserIdDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserIdIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus UserIdIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "UserIdIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserIdLogicalToDisplay
        /// </summary>
        public static string UserIdLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "UserIdLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus UserIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Comment.RunClassMethodS(conn, ThousandsRoads.Comment.ServerClassName, "UserIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus UserSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("UserSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method UserSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus UserSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("UserSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call ThousandsRoads.Comment_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Comment Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Comment)(conn.OpenProxyObj(ThousandsRoads.Comment.ServerClassName, id, concurrency, typeof(ThousandsRoads.Comment), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Comment Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Comment)(conn.OpenProxyObj(ThousandsRoads.Comment.ServerClassName, id, typeof(ThousandsRoads.Comment), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Comment Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Comment)(conn.OpenProxyObj(ThousandsRoads.Comment.ServerClassName, id, typeof(ThousandsRoads.Comment))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Comment Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Comment)(conn.OpenProxyObj(ThousandsRoads.Comment.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Comment), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Comment OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Comment)(conn.OpenProxyObj(ThousandsRoads.Comment.ServerClassName, id, concurrency, typeof(ThousandsRoads.Comment), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Comment OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Comment)(conn.OpenProxyObj(ThousandsRoads.Comment.ServerClassName, id, typeof(ThousandsRoads.Comment), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Comment OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Comment)(conn.OpenProxyObj(ThousandsRoads.Comment.ServerClassName, id, typeof(ThousandsRoads.Comment))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Comment OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Comment)(conn.OpenProxyObj(ThousandsRoads.Comment.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Comment), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Comment.ExistsIdInternal(conn, ThousandsRoads.Comment.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Comment.DeleteIdInternal(conn, ThousandsRoads.Comment.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return ThousandsRoads.Comment.KillExtentInternal(conn, ThousandsRoads.Comment.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(ThousandsRoads.Comment.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            ThousandsRoads.Comment.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(ThousandsRoads.Comment.ServerClassName);
            if (metaInfo.Validate(ThousandsRoads.Comment.ClassCheckSum, ThousandsRoads.Comment.PropertyInfoColn, ThousandsRoads.Comment.CheckSumMethodDict, ThousandsRoads.Comment.CheckSumQueryDict, ThousandsRoads.Comment.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            ThousandsRoads.Comment.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((ThousandsRoads.Comment.AllPropertiesInfoColn != null)) {
                return ThousandsRoads.Comment.AllPropertiesInfoColn;
            }
            ThousandsRoads.Comment.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(ThousandsRoads.Comment.PropertyInfoColn);
            return ThousandsRoads.Comment.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return ThousandsRoads.Comment.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace ThousandsRoads {
    
    
    /// <summary>
    /// Projection of class ThousandsRoads.Customer
    /// </summary>
    public partial class Customer : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "ThousandsRoads.Customer";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 14993;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(35);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(9);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Customer() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("ThousandsRoads.Customer", typeof(Customer));
            ;
            ThousandsRoads.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Avatar", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Comments", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfObj, 44704));
            ThousandsRoads.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("DisplayName", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Email", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("FriendListItems", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfObj, 12486));
            ThousandsRoads.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Luggages", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfObj, 48731));
            ThousandsRoads.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Rating", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Tokens", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfObj, 21206));
            ThousandsRoads.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Travelers", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfObj, 36400));
            ;
            ThousandsRoads.Customer.CheckSumMethodDict.Add("%ComposeOid", 26212);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("%DeleteExtent", 16541);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("%IsA", 55457);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("%SaveIndices", 40887);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("AvatarDisplayToLogical", 5545);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("AvatarIsValid", 31698);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("AvatarLogicalToDisplay", 5545);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("CommentsGetObject", 64492);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("CommentsGetObjectId", 17297);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("CommentsIsValid", 57396);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("DisplayNameDisplayToLogical", 5545);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("DisplayNameIsValid", 31698);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("DisplayNameLogicalToDisplay", 5545);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("EmailDisplayToLogical", 5545);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("EmailIsValid", 31698);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("EmailLogicalToDisplay", 5545);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("FriendListItemsGetObject", 64492);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("FriendListItemsGetObjectId", 17297);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("FriendListItemsIsValid", 57396);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("IDKEYDelete", 22132);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("IDKEYExists", 25395);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("IDKEYOpen", 37114);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("LuggagesGetObject", 64492);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("LuggagesGetObjectId", 17297);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("LuggagesIsValid", 57396);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("RatingDisplayToLogical", 50961);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("RatingIsValid", 31698);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("RatingLogicalToDisplay", 58023);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("TokensGetObject", 64492);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("TokensGetObjectId", 17297);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("TokensIsValid", 57396);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("TravelersGetObject", 64492);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("TravelersGetObjectId", 17297);
            ThousandsRoads.Customer.CheckSumMethodDict.Add("TravelersIsValid", 57396);
            ;
            ThousandsRoads.Customer.CheckSumQueryDict.Add("Extent", 54663);
        }
        
        /// <summary>Internal API</summary>
        public Customer() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Customer(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, ThousandsRoads.Customer.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Customer(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, ThousandsRoads.Customer.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Avatar
        /// </summary>
        public virtual string Avatar {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Avatar", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Avatar", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Comments
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfObjects Comments {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheListOfObjects));
                        this.GetPropertyS("Comments", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfObjects)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Comments", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property DisplayName
        /// </summary>
        public virtual string DisplayName {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("DisplayName", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("DisplayName", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Email
        /// </summary>
        public virtual string Email {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Email", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Email", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property FriendListItems
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfObjects FriendListItems {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheListOfObjects));
                        this.GetPropertyS("FriendListItems", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfObjects)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("FriendListItems", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Luggages
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfObjects Luggages {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheListOfObjects));
                        this.GetPropertyS("Luggages", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfObjects)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Luggages", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Rating
        /// </summary>
        public virtual System.Nullable<long> Rating {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Rating", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Rating", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Tokens
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfObjects Tokens {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheListOfObjects));
                        this.GetPropertyS("Tokens", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfObjects)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Tokens", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Travelers
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfObjects Travelers {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheListOfObjects));
                        this.GetPropertyS("Travelers", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfObjects)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Travelers", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AvatarDisplayToLogical
        /// </summary>
        public static string AvatarDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "AvatarDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AvatarIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus AvatarIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "AvatarIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AvatarLogicalToDisplay
        /// </summary>
        public static string AvatarLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "AvatarLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CommentsGetObject
        /// </summary>
        public virtual byte[] CommentsGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("CommentsGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method CommentsGetObjectId
        /// </summary>
        public virtual string CommentsGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("CommentsGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method CommentsIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus CommentsIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "CommentsIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DisplayNameDisplayToLogical
        /// </summary>
        public static string DisplayNameDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "DisplayNameDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DisplayNameIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DisplayNameIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "DisplayNameIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DisplayNameLogicalToDisplay
        /// </summary>
        public static string DisplayNameLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "DisplayNameLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EmailDisplayToLogical
        /// </summary>
        public static string EmailDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "EmailDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EmailIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus EmailIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "EmailIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EmailLogicalToDisplay
        /// </summary>
        public static string EmailLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "EmailLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method FriendListItemsGetObject
        /// </summary>
        public virtual byte[] FriendListItemsGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("FriendListItemsGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method FriendListItemsGetObjectId
        /// </summary>
        public virtual string FriendListItemsGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("FriendListItemsGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method FriendListItemsIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus FriendListItemsIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "FriendListItemsIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static ThousandsRoads.Customer IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(ThousandsRoads.Customer));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((ThousandsRoads.Customer)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LuggagesGetObject
        /// </summary>
        public virtual byte[] LuggagesGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("LuggagesGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method LuggagesGetObjectId
        /// </summary>
        public virtual string LuggagesGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("LuggagesGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method LuggagesIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus LuggagesIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "LuggagesIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method RatingDisplayToLogical
        /// </summary>
        public static System.Nullable<long> RatingDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "RatingDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method RatingIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus RatingIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "RatingIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method RatingLogicalToDisplay
        /// </summary>
        public static string RatingLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "RatingLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TokensGetObject
        /// </summary>
        public virtual byte[] TokensGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TokensGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TokensGetObjectId
        /// </summary>
        public virtual string TokensGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TokensGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TokensIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TokensIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "TokensIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TravelersGetObject
        /// </summary>
        public virtual byte[] TravelersGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TravelersGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelersGetObjectId
        /// </summary>
        public virtual string TravelersGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TravelersGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelersIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TravelersIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Customer.RunClassMethodS(conn, ThousandsRoads.Customer.ServerClassName, "TravelersIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call ThousandsRoads.Customer_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Customer Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Customer)(conn.OpenProxyObj(ThousandsRoads.Customer.ServerClassName, id, concurrency, typeof(ThousandsRoads.Customer), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Customer Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Customer)(conn.OpenProxyObj(ThousandsRoads.Customer.ServerClassName, id, typeof(ThousandsRoads.Customer), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Customer Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Customer)(conn.OpenProxyObj(ThousandsRoads.Customer.ServerClassName, id, typeof(ThousandsRoads.Customer))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Customer Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Customer)(conn.OpenProxyObj(ThousandsRoads.Customer.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Customer), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Customer OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Customer)(conn.OpenProxyObj(ThousandsRoads.Customer.ServerClassName, id, concurrency, typeof(ThousandsRoads.Customer), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Customer OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Customer)(conn.OpenProxyObj(ThousandsRoads.Customer.ServerClassName, id, typeof(ThousandsRoads.Customer), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Customer OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Customer)(conn.OpenProxyObj(ThousandsRoads.Customer.ServerClassName, id, typeof(ThousandsRoads.Customer))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Customer OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Customer)(conn.OpenProxyObj(ThousandsRoads.Customer.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Customer), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Customer.ExistsIdInternal(conn, ThousandsRoads.Customer.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Customer.DeleteIdInternal(conn, ThousandsRoads.Customer.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return ThousandsRoads.Customer.KillExtentInternal(conn, ThousandsRoads.Customer.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(ThousandsRoads.Customer.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            ThousandsRoads.Customer.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(ThousandsRoads.Customer.ServerClassName);
            if (metaInfo.Validate(ThousandsRoads.Customer.ClassCheckSum, ThousandsRoads.Customer.PropertyInfoColn, ThousandsRoads.Customer.CheckSumMethodDict, ThousandsRoads.Customer.CheckSumQueryDict, ThousandsRoads.Customer.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            ThousandsRoads.Customer.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((ThousandsRoads.Customer.AllPropertiesInfoColn != null)) {
                return ThousandsRoads.Customer.AllPropertiesInfoColn;
            }
            ThousandsRoads.Customer.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(ThousandsRoads.Customer.PropertyInfoColn);
            return ThousandsRoads.Customer.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return ThousandsRoads.Customer.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace ThousandsRoads {
    
    
    /// <summary>
    /// Projection of class ThousandsRoads.FriendList
    /// </summary>
    public partial class FriendList : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "ThousandsRoads.FriendList";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 14993;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(16);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(2);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static FriendList() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("ThousandsRoads.FriendList", typeof(FriendList));
            ;
            ThousandsRoads.FriendList.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Customers", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfObj, 5821));
            ThousandsRoads.FriendList.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("ParentList", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 58472));
            ;
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("%ComposeOid", 26212);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("%DeleteExtent", 16541);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("%IsA", 55457);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("%SaveIndices", 40887);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("CustomersGetObject", 64492);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("CustomersGetObjectId", 17297);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("CustomersIsValid", 57396);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("IDKEYDelete", 22132);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("IDKEYExists", 25395);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("IDKEYOpen", 54081);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("ParentListGetObject", 64492);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("ParentListGetObjectId", 17297);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("ParentListIsValid", 57396);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("ParentListSetObject", 32506);
            ThousandsRoads.FriendList.CheckSumMethodDict.Add("ParentListSetObjectId", 50028);
            ;
            ThousandsRoads.FriendList.CheckSumQueryDict.Add("Extent", 15338);
        }
        
        /// <summary>Internal API</summary>
        public FriendList() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public FriendList(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, ThousandsRoads.FriendList.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public FriendList(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, ThousandsRoads.FriendList.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Customers
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfObjects Customers {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheListOfObjects));
                        this.GetPropertyS("Customers", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfObjects)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Customers", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property ParentList
        /// </summary>
        public virtual ThousandsRoads.FriendListItem ParentList {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(ThousandsRoads.FriendListItem));
                        this.GetPropertyS("ParentList", mtdSignature);
                        return ((ThousandsRoads.FriendListItem)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("ParentList", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    ThousandsRoads.FriendList.RunClassMethodS(conn, ThousandsRoads.FriendList.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    ThousandsRoads.FriendList.RunClassMethodS(conn, ThousandsRoads.FriendList.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    ThousandsRoads.FriendList.RunClassMethodS(conn, ThousandsRoads.FriendList.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    ThousandsRoads.FriendList.RunClassMethodS(conn, ThousandsRoads.FriendList.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    ThousandsRoads.FriendList.RunClassMethodS(conn, ThousandsRoads.FriendList.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CustomersGetObject
        /// </summary>
        public virtual byte[] CustomersGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("CustomersGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method CustomersGetObjectId
        /// </summary>
        public virtual string CustomersGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("CustomersGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method CustomersIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus CustomersIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.FriendList.RunClassMethodS(conn, ThousandsRoads.FriendList.ServerClassName, "CustomersIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    ThousandsRoads.FriendList.RunClassMethodS(conn, ThousandsRoads.FriendList.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    ThousandsRoads.FriendList.RunClassMethodS(conn, ThousandsRoads.FriendList.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static ThousandsRoads.FriendList IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(ThousandsRoads.FriendList));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    ThousandsRoads.FriendList.RunClassMethodS(conn, ThousandsRoads.FriendList.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((ThousandsRoads.FriendList)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ParentListGetObject
        /// </summary>
        public virtual byte[] ParentListGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("ParentListGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ParentListGetObjectId
        /// </summary>
        public virtual string ParentListGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("ParentListGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ParentListIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ParentListIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.FriendList.RunClassMethodS(conn, ThousandsRoads.FriendList.ServerClassName, "ParentListIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ParentListSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus ParentListSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("ParentListSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ParentListSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus ParentListSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("ParentListSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call ThousandsRoads.FriendList_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.FriendList Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendList)(conn.OpenProxyObj(ThousandsRoads.FriendList.ServerClassName, id, concurrency, typeof(ThousandsRoads.FriendList), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.FriendList Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendList)(conn.OpenProxyObj(ThousandsRoads.FriendList.ServerClassName, id, typeof(ThousandsRoads.FriendList), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.FriendList Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendList)(conn.OpenProxyObj(ThousandsRoads.FriendList.ServerClassName, id, typeof(ThousandsRoads.FriendList))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.FriendList Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendList)(conn.OpenProxyObj(ThousandsRoads.FriendList.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.FriendList), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.FriendList OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendList)(conn.OpenProxyObj(ThousandsRoads.FriendList.ServerClassName, id, concurrency, typeof(ThousandsRoads.FriendList), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.FriendList OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendList)(conn.OpenProxyObj(ThousandsRoads.FriendList.ServerClassName, id, typeof(ThousandsRoads.FriendList), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.FriendList OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendList)(conn.OpenProxyObj(ThousandsRoads.FriendList.ServerClassName, id, typeof(ThousandsRoads.FriendList))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.FriendList OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendList)(conn.OpenProxyObj(ThousandsRoads.FriendList.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.FriendList), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.FriendList.ExistsIdInternal(conn, ThousandsRoads.FriendList.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.FriendList.DeleteIdInternal(conn, ThousandsRoads.FriendList.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return ThousandsRoads.FriendList.KillExtentInternal(conn, ThousandsRoads.FriendList.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(ThousandsRoads.FriendList.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            ThousandsRoads.FriendList.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(ThousandsRoads.FriendList.ServerClassName);
            if (metaInfo.Validate(ThousandsRoads.FriendList.ClassCheckSum, ThousandsRoads.FriendList.PropertyInfoColn, ThousandsRoads.FriendList.CheckSumMethodDict, ThousandsRoads.FriendList.CheckSumQueryDict, ThousandsRoads.FriendList.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            ThousandsRoads.FriendList.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((ThousandsRoads.FriendList.AllPropertiesInfoColn != null)) {
                return ThousandsRoads.FriendList.AllPropertiesInfoColn;
            }
            ThousandsRoads.FriendList.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(ThousandsRoads.FriendList.PropertyInfoColn);
            return ThousandsRoads.FriendList.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return ThousandsRoads.FriendList.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace ThousandsRoads {
    
    
    /// <summary>
    /// Projection of class ThousandsRoads.FriendListItem
    /// </summary>
    public partial class FriendListItem : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "ThousandsRoads.FriendListItem";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 14993;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(21);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(3);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static FriendListItem() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("ThousandsRoads.FriendListItem", typeof(FriendListItem));
            ;
            ThousandsRoads.FriendListItem.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("CustomerList", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 63107));
            ThousandsRoads.FriendListItem.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Inproces", InterSystems.Data.CacheTypes.ClientTypeId.tBool, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 24603));
            ThousandsRoads.FriendListItem.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Owner", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 27386));
            ;
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("%ComposeOid", 26212);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("%DeleteExtent", 16541);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("%IsA", 55457);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("%SaveIndices", 40887);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("CustomerListGetObject", 64492);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("CustomerListGetObjectId", 17297);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("CustomerListIsValid", 57396);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("CustomerListSetObject", 32506);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("CustomerListSetObjectId", 50028);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("IDKEYDelete", 22132);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("IDKEYExists", 25395);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("IDKEYOpen", 32408);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("InprocesDisplayToLogical", 29486);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("InprocesIsValid", 25003);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("InprocesLogicalToDisplay", 25423);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("OwnerGetObject", 64492);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("OwnerGetObjectId", 17297);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("OwnerIsValid", 57396);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("OwnerSetObject", 32506);
            ThousandsRoads.FriendListItem.CheckSumMethodDict.Add("OwnerSetObjectId", 50028);
            ;
            ThousandsRoads.FriendListItem.CheckSumQueryDict.Add("Extent", 29283);
        }
        
        /// <summary>Internal API</summary>
        public FriendListItem() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public FriendListItem(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, ThousandsRoads.FriendListItem.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public FriendListItem(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, ThousandsRoads.FriendListItem.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property CustomerList
        /// </summary>
        public virtual ThousandsRoads.FriendList CustomerList {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(ThousandsRoads.FriendList));
                        this.GetPropertyS("CustomerList", mtdSignature);
                        return ((ThousandsRoads.FriendList)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("CustomerList", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Inproces
        /// </summary>
        public virtual System.Nullable<bool> Inproces {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                        this.GetPropertyS("Inproces", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Inproces", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Owner
        /// </summary>
        public virtual ThousandsRoads.Customer Owner {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(ThousandsRoads.Customer));
                        this.GetPropertyS("Owner", mtdSignature);
                        return ((ThousandsRoads.Customer)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Owner", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerListGetObject
        /// </summary>
        public virtual byte[] CustomerListGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("CustomerListGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerListGetObjectId
        /// </summary>
        public virtual string CustomerListGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("CustomerListGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerListIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus CustomerListIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "CustomerListIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerListSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus CustomerListSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("CustomerListSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerListSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus CustomerListSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("CustomerListSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static ThousandsRoads.FriendListItem IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(ThousandsRoads.FriendListItem));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((ThousandsRoads.FriendListItem)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method InprocesDisplayToLogical
        /// </summary>
        public static System.Nullable<bool> InprocesDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "InprocesDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method InprocesIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus InprocesIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "InprocesIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method InprocesLogicalToDisplay
        /// </summary>
        public static string InprocesLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<bool> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "InprocesLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method OwnerGetObject
        /// </summary>
        public virtual byte[] OwnerGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("OwnerGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method OwnerGetObjectId
        /// </summary>
        public virtual string OwnerGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("OwnerGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method OwnerIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus OwnerIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.FriendListItem.RunClassMethodS(conn, ThousandsRoads.FriendListItem.ServerClassName, "OwnerIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method OwnerSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus OwnerSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("OwnerSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method OwnerSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus OwnerSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("OwnerSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call ThousandsRoads.FriendListItem_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.FriendListItem Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendListItem)(conn.OpenProxyObj(ThousandsRoads.FriendListItem.ServerClassName, id, concurrency, typeof(ThousandsRoads.FriendListItem), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.FriendListItem Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendListItem)(conn.OpenProxyObj(ThousandsRoads.FriendListItem.ServerClassName, id, typeof(ThousandsRoads.FriendListItem), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.FriendListItem Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendListItem)(conn.OpenProxyObj(ThousandsRoads.FriendListItem.ServerClassName, id, typeof(ThousandsRoads.FriendListItem))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.FriendListItem Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendListItem)(conn.OpenProxyObj(ThousandsRoads.FriendListItem.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.FriendListItem), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.FriendListItem OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendListItem)(conn.OpenProxyObj(ThousandsRoads.FriendListItem.ServerClassName, id, concurrency, typeof(ThousandsRoads.FriendListItem), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.FriendListItem OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendListItem)(conn.OpenProxyObj(ThousandsRoads.FriendListItem.ServerClassName, id, typeof(ThousandsRoads.FriendListItem), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.FriendListItem OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendListItem)(conn.OpenProxyObj(ThousandsRoads.FriendListItem.ServerClassName, id, typeof(ThousandsRoads.FriendListItem))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.FriendListItem OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.FriendListItem)(conn.OpenProxyObj(ThousandsRoads.FriendListItem.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.FriendListItem), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.FriendListItem.ExistsIdInternal(conn, ThousandsRoads.FriendListItem.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.FriendListItem.DeleteIdInternal(conn, ThousandsRoads.FriendListItem.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return ThousandsRoads.FriendListItem.KillExtentInternal(conn, ThousandsRoads.FriendListItem.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(ThousandsRoads.FriendListItem.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            ThousandsRoads.FriendListItem.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(ThousandsRoads.FriendListItem.ServerClassName);
            if (metaInfo.Validate(ThousandsRoads.FriendListItem.ClassCheckSum, ThousandsRoads.FriendListItem.PropertyInfoColn, ThousandsRoads.FriendListItem.CheckSumMethodDict, ThousandsRoads.FriendListItem.CheckSumQueryDict, ThousandsRoads.FriendListItem.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            ThousandsRoads.FriendListItem.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((ThousandsRoads.FriendListItem.AllPropertiesInfoColn != null)) {
                return ThousandsRoads.FriendListItem.AllPropertiesInfoColn;
            }
            ThousandsRoads.FriendListItem.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(ThousandsRoads.FriendListItem.PropertyInfoColn);
            return ThousandsRoads.FriendListItem.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return ThousandsRoads.FriendListItem.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace ThousandsRoads {
    
    
    /// <summary>
    /// Projection of class ThousandsRoads.Luggage
    /// </summary>
    public partial class Luggage : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "ThousandsRoads.Luggage";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 14993;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(24);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(4);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Luggage() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("ThousandsRoads.Luggage", typeof(Luggage));
            ;
            ThousandsRoads.Luggage.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Customer", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 27386));
            ThousandsRoads.Luggage.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Endpoint", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Luggage.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Startpoint", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Luggage.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Travel", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 36000));
            ;
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("%ComposeOid", 26212);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("%DeleteExtent", 16541);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("%IsA", 55457);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("%SaveIndices", 40887);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("CustomerGetObject", 64492);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("CustomerGetObjectId", 17297);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("CustomerIsValid", 57396);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("CustomerSetObject", 32506);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("CustomerSetObjectId", 50028);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("EndpointDisplayToLogical", 5545);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("EndpointIsValid", 31698);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("EndpointLogicalToDisplay", 5545);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("IDKEYDelete", 22132);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("IDKEYExists", 25395);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("IDKEYOpen", 31574);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("StartpointDisplayToLogical", 5545);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("StartpointIsValid", 31698);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("StartpointLogicalToDisplay", 5545);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("TravelGetObject", 64492);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("TravelGetObjectId", 17297);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("TravelIsValid", 57396);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("TravelSetObject", 32506);
            ThousandsRoads.Luggage.CheckSumMethodDict.Add("TravelSetObjectId", 50028);
            ;
            ThousandsRoads.Luggage.CheckSumQueryDict.Add("Extent", 46880);
        }
        
        /// <summary>Internal API</summary>
        public Luggage() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Luggage(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, ThousandsRoads.Luggage.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Luggage(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, ThousandsRoads.Luggage.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Customer
        /// </summary>
        public virtual ThousandsRoads.Customer Customer {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(ThousandsRoads.Customer));
                        this.GetPropertyS("Customer", mtdSignature);
                        return ((ThousandsRoads.Customer)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Customer", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Endpoint
        /// </summary>
        public virtual string Endpoint {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Endpoint", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Endpoint", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Startpoint
        /// </summary>
        public virtual string Startpoint {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Startpoint", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Startpoint", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Travel
        /// </summary>
        public virtual ThousandsRoads.Travel Travel {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(ThousandsRoads.Travel));
                        this.GetPropertyS("Travel", mtdSignature);
                        return ((ThousandsRoads.Travel)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Travel", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerGetObject
        /// </summary>
        public virtual byte[] CustomerGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("CustomerGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerGetObjectId
        /// </summary>
        public virtual string CustomerGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("CustomerGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus CustomerIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "CustomerIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus CustomerSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("CustomerSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus CustomerSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("CustomerSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method EndpointDisplayToLogical
        /// </summary>
        public static string EndpointDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "EndpointDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EndpointIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus EndpointIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "EndpointIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EndpointLogicalToDisplay
        /// </summary>
        public static string EndpointLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "EndpointLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static ThousandsRoads.Luggage IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(ThousandsRoads.Luggage));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((ThousandsRoads.Luggage)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StartpointDisplayToLogical
        /// </summary>
        public static string StartpointDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "StartpointDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StartpointIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus StartpointIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "StartpointIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StartpointLogicalToDisplay
        /// </summary>
        public static string StartpointLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "StartpointLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TravelGetObject
        /// </summary>
        public virtual byte[] TravelGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TravelGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelGetObjectId
        /// </summary>
        public virtual string TravelGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TravelGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TravelIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Luggage.RunClassMethodS(conn, ThousandsRoads.Luggage.ServerClassName, "TravelIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TravelSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus TravelSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("TravelSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus TravelSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("TravelSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call ThousandsRoads.Luggage_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Luggage Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Luggage)(conn.OpenProxyObj(ThousandsRoads.Luggage.ServerClassName, id, concurrency, typeof(ThousandsRoads.Luggage), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Luggage Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Luggage)(conn.OpenProxyObj(ThousandsRoads.Luggage.ServerClassName, id, typeof(ThousandsRoads.Luggage), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Luggage Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Luggage)(conn.OpenProxyObj(ThousandsRoads.Luggage.ServerClassName, id, typeof(ThousandsRoads.Luggage))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Luggage Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Luggage)(conn.OpenProxyObj(ThousandsRoads.Luggage.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Luggage), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Luggage OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Luggage)(conn.OpenProxyObj(ThousandsRoads.Luggage.ServerClassName, id, concurrency, typeof(ThousandsRoads.Luggage), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Luggage OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Luggage)(conn.OpenProxyObj(ThousandsRoads.Luggage.ServerClassName, id, typeof(ThousandsRoads.Luggage), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Luggage OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Luggage)(conn.OpenProxyObj(ThousandsRoads.Luggage.ServerClassName, id, typeof(ThousandsRoads.Luggage))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Luggage OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Luggage)(conn.OpenProxyObj(ThousandsRoads.Luggage.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Luggage), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Luggage.ExistsIdInternal(conn, ThousandsRoads.Luggage.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Luggage.DeleteIdInternal(conn, ThousandsRoads.Luggage.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return ThousandsRoads.Luggage.KillExtentInternal(conn, ThousandsRoads.Luggage.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(ThousandsRoads.Luggage.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            ThousandsRoads.Luggage.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(ThousandsRoads.Luggage.ServerClassName);
            if (metaInfo.Validate(ThousandsRoads.Luggage.ClassCheckSum, ThousandsRoads.Luggage.PropertyInfoColn, ThousandsRoads.Luggage.CheckSumMethodDict, ThousandsRoads.Luggage.CheckSumQueryDict, ThousandsRoads.Luggage.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            ThousandsRoads.Luggage.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((ThousandsRoads.Luggage.AllPropertiesInfoColn != null)) {
                return ThousandsRoads.Luggage.AllPropertiesInfoColn;
            }
            ThousandsRoads.Luggage.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(ThousandsRoads.Luggage.PropertyInfoColn);
            return ThousandsRoads.Luggage.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return ThousandsRoads.Luggage.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace ThousandsRoads {
    
    
    /// <summary>
    /// Projection of class ThousandsRoads.MapPoint
    /// </summary>
    public partial class MapPoint : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "ThousandsRoads.MapPoint";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 14993;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(22);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(4);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static MapPoint() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("ThousandsRoads.MapPoint", typeof(MapPoint));
            ;
            ThousandsRoads.MapPoint.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Latitude", InterSystems.Data.CacheTypes.ClientTypeId.tDouble, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 54324));
            ThousandsRoads.MapPoint.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Longitude", InterSystems.Data.CacheTypes.ClientTypeId.tDouble, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 54324));
            ThousandsRoads.MapPoint.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.MapPoint.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Travel", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 36000));
            ;
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("%ComposeOid", 26212);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("%DeleteExtent", 16541);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("%IsA", 55457);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("%SaveIndices", 40887);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("IDKEYDelete", 22132);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("IDKEYExists", 25395);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("IDKEYOpen", 52586);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("LatitudeDisplayToLogical", 54455);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("LatitudeIsValid", 31698);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("LatitudeLogicalToDisplay", 20747);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("LongitudeDisplayToLogical", 54455);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("LongitudeIsValid", 31698);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("LongitudeLogicalToDisplay", 20747);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("NameDisplayToLogical", 5545);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("NameIsValid", 31698);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("NameLogicalToDisplay", 5545);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("TravelGetObject", 64492);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("TravelGetObjectId", 17297);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("TravelIsValid", 57396);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("TravelSetObject", 32506);
            ThousandsRoads.MapPoint.CheckSumMethodDict.Add("TravelSetObjectId", 50028);
            ;
            ThousandsRoads.MapPoint.CheckSumQueryDict.Add("Extent", 26815);
        }
        
        /// <summary>Internal API</summary>
        public MapPoint() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public MapPoint(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, ThousandsRoads.MapPoint.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public MapPoint(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, ThousandsRoads.MapPoint.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Latitude
        /// </summary>
        public virtual System.Nullable<double> Latitude {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                        this.GetPropertyS("Latitude", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Latitude", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Longitude
        /// </summary>
        public virtual System.Nullable<double> Longitude {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                        this.GetPropertyS("Longitude", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Longitude", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Name
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Travel
        /// </summary>
        public virtual ThousandsRoads.Travel Travel {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(ThousandsRoads.Travel));
                        this.GetPropertyS("Travel", mtdSignature);
                        return ((ThousandsRoads.Travel)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Travel", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static ThousandsRoads.MapPoint IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(ThousandsRoads.MapPoint));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((ThousandsRoads.MapPoint)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LatitudeDisplayToLogical
        /// </summary>
        public static System.Nullable<double> LatitudeDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "LatitudeDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LatitudeIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus LatitudeIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "LatitudeIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LatitudeLogicalToDisplay
        /// </summary>
        public static string LatitudeLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<double> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "LatitudeLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LongitudeDisplayToLogical
        /// </summary>
        public static System.Nullable<double> LongitudeDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "LongitudeDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LongitudeIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus LongitudeIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "LongitudeIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LongitudeLogicalToDisplay
        /// </summary>
        public static string LongitudeLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<double> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "LongitudeLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameDisplayToLogical
        /// </summary>
        public static string NameDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "NameDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus NameIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "NameIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameLogicalToDisplay
        /// </summary>
        public static string NameLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "NameLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TravelGetObject
        /// </summary>
        public virtual byte[] TravelGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TravelGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelGetObjectId
        /// </summary>
        public virtual string TravelGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TravelGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TravelIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.MapPoint.RunClassMethodS(conn, ThousandsRoads.MapPoint.ServerClassName, "TravelIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TravelSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus TravelSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("TravelSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus TravelSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("TravelSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call ThousandsRoads.MapPoint_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.MapPoint Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.MapPoint)(conn.OpenProxyObj(ThousandsRoads.MapPoint.ServerClassName, id, concurrency, typeof(ThousandsRoads.MapPoint), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.MapPoint Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.MapPoint)(conn.OpenProxyObj(ThousandsRoads.MapPoint.ServerClassName, id, typeof(ThousandsRoads.MapPoint), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.MapPoint Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.MapPoint)(conn.OpenProxyObj(ThousandsRoads.MapPoint.ServerClassName, id, typeof(ThousandsRoads.MapPoint))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.MapPoint Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.MapPoint)(conn.OpenProxyObj(ThousandsRoads.MapPoint.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.MapPoint), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.MapPoint OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.MapPoint)(conn.OpenProxyObj(ThousandsRoads.MapPoint.ServerClassName, id, concurrency, typeof(ThousandsRoads.MapPoint), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.MapPoint OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.MapPoint)(conn.OpenProxyObj(ThousandsRoads.MapPoint.ServerClassName, id, typeof(ThousandsRoads.MapPoint), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.MapPoint OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.MapPoint)(conn.OpenProxyObj(ThousandsRoads.MapPoint.ServerClassName, id, typeof(ThousandsRoads.MapPoint))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.MapPoint OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.MapPoint)(conn.OpenProxyObj(ThousandsRoads.MapPoint.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.MapPoint), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.MapPoint.ExistsIdInternal(conn, ThousandsRoads.MapPoint.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.MapPoint.DeleteIdInternal(conn, ThousandsRoads.MapPoint.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return ThousandsRoads.MapPoint.KillExtentInternal(conn, ThousandsRoads.MapPoint.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(ThousandsRoads.MapPoint.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            ThousandsRoads.MapPoint.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(ThousandsRoads.MapPoint.ServerClassName);
            if (metaInfo.Validate(ThousandsRoads.MapPoint.ClassCheckSum, ThousandsRoads.MapPoint.PropertyInfoColn, ThousandsRoads.MapPoint.CheckSumMethodDict, ThousandsRoads.MapPoint.CheckSumQueryDict, ThousandsRoads.MapPoint.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            ThousandsRoads.MapPoint.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((ThousandsRoads.MapPoint.AllPropertiesInfoColn != null)) {
                return ThousandsRoads.MapPoint.AllPropertiesInfoColn;
            }
            ThousandsRoads.MapPoint.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(ThousandsRoads.MapPoint.PropertyInfoColn);
            return ThousandsRoads.MapPoint.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return ThousandsRoads.MapPoint.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace ThousandsRoads {
    
    
    /// <summary>
    /// Projection of class ThousandsRoads.Message
    /// </summary>
    public partial class Message : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "ThousandsRoads.Message";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 14993;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(38);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(10);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Message() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("ThousandsRoads.Message", typeof(Message));
            ;
            ThousandsRoads.Message.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Direction", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Message.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Luggage", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Message.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("MessageText", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Message.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("MessengerId", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Message.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("PersonCount", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Message.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("State", InterSystems.Data.CacheTypes.ClientTypeId.tBool, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 24603));
            ThousandsRoads.Message.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Theme", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Message.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("TravelId", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Message.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Type", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Message.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("UserId", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ;
            ThousandsRoads.Message.CheckSumMethodDict.Add("%ComposeOid", 26212);
            ThousandsRoads.Message.CheckSumMethodDict.Add("%DeleteExtent", 16541);
            ThousandsRoads.Message.CheckSumMethodDict.Add("%IsA", 55457);
            ThousandsRoads.Message.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            ThousandsRoads.Message.CheckSumMethodDict.Add("%SaveIndices", 40887);
            ThousandsRoads.Message.CheckSumMethodDict.Add("DirectionDisplayToLogical", 50961);
            ThousandsRoads.Message.CheckSumMethodDict.Add("DirectionIsValid", 31698);
            ThousandsRoads.Message.CheckSumMethodDict.Add("DirectionLogicalToDisplay", 58023);
            ThousandsRoads.Message.CheckSumMethodDict.Add("IDKEYDelete", 22132);
            ThousandsRoads.Message.CheckSumMethodDict.Add("IDKEYExists", 25395);
            ThousandsRoads.Message.CheckSumMethodDict.Add("IDKEYOpen", 46484);
            ThousandsRoads.Message.CheckSumMethodDict.Add("LuggageDisplayToLogical", 50961);
            ThousandsRoads.Message.CheckSumMethodDict.Add("LuggageIsValid", 31698);
            ThousandsRoads.Message.CheckSumMethodDict.Add("LuggageLogicalToDisplay", 58023);
            ThousandsRoads.Message.CheckSumMethodDict.Add("MessageTextDisplayToLogical", 5545);
            ThousandsRoads.Message.CheckSumMethodDict.Add("MessageTextIsValid", 31698);
            ThousandsRoads.Message.CheckSumMethodDict.Add("MessageTextLogicalToDisplay", 5545);
            ThousandsRoads.Message.CheckSumMethodDict.Add("MessengerIdDisplayToLogical", 50961);
            ThousandsRoads.Message.CheckSumMethodDict.Add("MessengerIdIsValid", 31698);
            ThousandsRoads.Message.CheckSumMethodDict.Add("MessengerIdLogicalToDisplay", 58023);
            ThousandsRoads.Message.CheckSumMethodDict.Add("PersonCountDisplayToLogical", 50961);
            ThousandsRoads.Message.CheckSumMethodDict.Add("PersonCountIsValid", 31698);
            ThousandsRoads.Message.CheckSumMethodDict.Add("PersonCountLogicalToDisplay", 58023);
            ThousandsRoads.Message.CheckSumMethodDict.Add("StateDisplayToLogical", 29486);
            ThousandsRoads.Message.CheckSumMethodDict.Add("StateIsValid", 25003);
            ThousandsRoads.Message.CheckSumMethodDict.Add("StateLogicalToDisplay", 25423);
            ThousandsRoads.Message.CheckSumMethodDict.Add("ThemeDisplayToLogical", 5545);
            ThousandsRoads.Message.CheckSumMethodDict.Add("ThemeIsValid", 31698);
            ThousandsRoads.Message.CheckSumMethodDict.Add("ThemeLogicalToDisplay", 5545);
            ThousandsRoads.Message.CheckSumMethodDict.Add("TravelIdDisplayToLogical", 50961);
            ThousandsRoads.Message.CheckSumMethodDict.Add("TravelIdIsValid", 31698);
            ThousandsRoads.Message.CheckSumMethodDict.Add("TravelIdLogicalToDisplay", 58023);
            ThousandsRoads.Message.CheckSumMethodDict.Add("TypeDisplayToLogical", 50961);
            ThousandsRoads.Message.CheckSumMethodDict.Add("TypeIsValid", 31698);
            ThousandsRoads.Message.CheckSumMethodDict.Add("TypeLogicalToDisplay", 58023);
            ThousandsRoads.Message.CheckSumMethodDict.Add("UserIdDisplayToLogical", 50961);
            ThousandsRoads.Message.CheckSumMethodDict.Add("UserIdIsValid", 31698);
            ThousandsRoads.Message.CheckSumMethodDict.Add("UserIdLogicalToDisplay", 58023);
            ;
            ThousandsRoads.Message.CheckSumQueryDict.Add("Extent", 11221);
        }
        
        /// <summary>Internal API</summary>
        public Message() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Message(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, ThousandsRoads.Message.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Message(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, ThousandsRoads.Message.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Direction
        /// </summary>
        public virtual System.Nullable<long> Direction {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Direction", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Direction", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Luggage
        /// </summary>
        public virtual System.Nullable<long> Luggage {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Luggage", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Luggage", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property MessageText
        /// </summary>
        public virtual string MessageText {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("MessageText", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("MessageText", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property MessengerId
        /// </summary>
        public virtual System.Nullable<long> MessengerId {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("MessengerId", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("MessengerId", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property PersonCount
        /// </summary>
        public virtual System.Nullable<long> PersonCount {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("PersonCount", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("PersonCount", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property State
        /// </summary>
        public virtual System.Nullable<bool> State {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                        this.GetPropertyS("State", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("State", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Theme
        /// </summary>
        public virtual string Theme {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Theme", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Theme", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property TravelId
        /// </summary>
        public virtual System.Nullable<long> TravelId {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("TravelId", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("TravelId", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Type
        /// </summary>
        public virtual System.Nullable<long> Type {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Type", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Type", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property UserId
        /// </summary>
        public virtual System.Nullable<long> UserId {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("UserId", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("UserId", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DirectionDisplayToLogical
        /// </summary>
        public static System.Nullable<long> DirectionDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "DirectionDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DirectionIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DirectionIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "DirectionIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DirectionLogicalToDisplay
        /// </summary>
        public static string DirectionLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "DirectionLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static ThousandsRoads.Message IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(ThousandsRoads.Message));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((ThousandsRoads.Message)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LuggageDisplayToLogical
        /// </summary>
        public static System.Nullable<long> LuggageDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "LuggageDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LuggageIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus LuggageIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "LuggageIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LuggageLogicalToDisplay
        /// </summary>
        public static string LuggageLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "LuggageLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessageTextDisplayToLogical
        /// </summary>
        public static string MessageTextDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "MessageTextDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessageTextIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus MessageTextIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "MessageTextIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessageTextLogicalToDisplay
        /// </summary>
        public static string MessageTextLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "MessageTextLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessengerIdDisplayToLogical
        /// </summary>
        public static System.Nullable<long> MessengerIdDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "MessengerIdDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessengerIdIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus MessengerIdIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "MessengerIdIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MessengerIdLogicalToDisplay
        /// </summary>
        public static string MessengerIdLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "MessengerIdLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PersonCountDisplayToLogical
        /// </summary>
        public static System.Nullable<long> PersonCountDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "PersonCountDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PersonCountIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus PersonCountIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "PersonCountIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PersonCountLogicalToDisplay
        /// </summary>
        public static string PersonCountLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "PersonCountLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StateDisplayToLogical
        /// </summary>
        public static System.Nullable<bool> StateDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "StateDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StateIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus StateIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "StateIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StateLogicalToDisplay
        /// </summary>
        public static string StateLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<bool> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "StateLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ThemeDisplayToLogical
        /// </summary>
        public static string ThemeDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "ThemeDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ThemeIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ThemeIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "ThemeIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ThemeLogicalToDisplay
        /// </summary>
        public static string ThemeLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "ThemeLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TravelIdDisplayToLogical
        /// </summary>
        public static System.Nullable<long> TravelIdDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "TravelIdDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TravelIdIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TravelIdIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "TravelIdIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TravelIdLogicalToDisplay
        /// </summary>
        public static string TravelIdLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "TravelIdLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TypeDisplayToLogical
        /// </summary>
        public static System.Nullable<long> TypeDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "TypeDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TypeIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TypeIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "TypeIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TypeLogicalToDisplay
        /// </summary>
        public static string TypeLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "TypeLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserIdDisplayToLogical
        /// </summary>
        public static System.Nullable<long> UserIdDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "UserIdDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserIdIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus UserIdIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "UserIdIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserIdLogicalToDisplay
        /// </summary>
        public static string UserIdLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Message.RunClassMethodS(conn, ThousandsRoads.Message.ServerClassName, "UserIdLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call ThousandsRoads.Message_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Message Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Message)(conn.OpenProxyObj(ThousandsRoads.Message.ServerClassName, id, concurrency, typeof(ThousandsRoads.Message), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Message Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Message)(conn.OpenProxyObj(ThousandsRoads.Message.ServerClassName, id, typeof(ThousandsRoads.Message), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Message Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Message)(conn.OpenProxyObj(ThousandsRoads.Message.ServerClassName, id, typeof(ThousandsRoads.Message))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Message Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Message)(conn.OpenProxyObj(ThousandsRoads.Message.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Message), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Message OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Message)(conn.OpenProxyObj(ThousandsRoads.Message.ServerClassName, id, concurrency, typeof(ThousandsRoads.Message), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Message OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Message)(conn.OpenProxyObj(ThousandsRoads.Message.ServerClassName, id, typeof(ThousandsRoads.Message), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Message OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Message)(conn.OpenProxyObj(ThousandsRoads.Message.ServerClassName, id, typeof(ThousandsRoads.Message))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Message OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Message)(conn.OpenProxyObj(ThousandsRoads.Message.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Message), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Message.ExistsIdInternal(conn, ThousandsRoads.Message.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Message.DeleteIdInternal(conn, ThousandsRoads.Message.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return ThousandsRoads.Message.KillExtentInternal(conn, ThousandsRoads.Message.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(ThousandsRoads.Message.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            ThousandsRoads.Message.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(ThousandsRoads.Message.ServerClassName);
            if (metaInfo.Validate(ThousandsRoads.Message.ClassCheckSum, ThousandsRoads.Message.PropertyInfoColn, ThousandsRoads.Message.CheckSumMethodDict, ThousandsRoads.Message.CheckSumQueryDict, ThousandsRoads.Message.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            ThousandsRoads.Message.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((ThousandsRoads.Message.AllPropertiesInfoColn != null)) {
                return ThousandsRoads.Message.AllPropertiesInfoColn;
            }
            ThousandsRoads.Message.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(ThousandsRoads.Message.PropertyInfoColn);
            return ThousandsRoads.Message.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return ThousandsRoads.Message.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace ThousandsRoads {
    
    
    /// <summary>
    /// Projection of class ThousandsRoads.Token
    /// </summary>
    public partial class Token : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "ThousandsRoads.Token";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 14993;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(19);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(3);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Token() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("ThousandsRoads.Token", typeof(Token));
            ;
            ThousandsRoads.Token.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("SocialId", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Token.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Tokentype", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Token.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("User", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 27386));
            ;
            ThousandsRoads.Token.CheckSumMethodDict.Add("%ComposeOid", 26212);
            ThousandsRoads.Token.CheckSumMethodDict.Add("%DeleteExtent", 16541);
            ThousandsRoads.Token.CheckSumMethodDict.Add("%IsA", 55457);
            ThousandsRoads.Token.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            ThousandsRoads.Token.CheckSumMethodDict.Add("%SaveIndices", 40887);
            ThousandsRoads.Token.CheckSumMethodDict.Add("IDKEYDelete", 22132);
            ThousandsRoads.Token.CheckSumMethodDict.Add("IDKEYExists", 25395);
            ThousandsRoads.Token.CheckSumMethodDict.Add("IDKEYOpen", 43884);
            ThousandsRoads.Token.CheckSumMethodDict.Add("SocialIdDisplayToLogical", 5545);
            ThousandsRoads.Token.CheckSumMethodDict.Add("SocialIdIsValid", 31698);
            ThousandsRoads.Token.CheckSumMethodDict.Add("SocialIdLogicalToDisplay", 5545);
            ThousandsRoads.Token.CheckSumMethodDict.Add("TokentypeDisplayToLogical", 50961);
            ThousandsRoads.Token.CheckSumMethodDict.Add("TokentypeIsValid", 31698);
            ThousandsRoads.Token.CheckSumMethodDict.Add("TokentypeLogicalToDisplay", 58023);
            ThousandsRoads.Token.CheckSumMethodDict.Add("UserGetObject", 64492);
            ThousandsRoads.Token.CheckSumMethodDict.Add("UserGetObjectId", 17297);
            ThousandsRoads.Token.CheckSumMethodDict.Add("UserIsValid", 57396);
            ThousandsRoads.Token.CheckSumMethodDict.Add("UserSetObject", 32506);
            ThousandsRoads.Token.CheckSumMethodDict.Add("UserSetObjectId", 50028);
            ;
            ThousandsRoads.Token.CheckSumQueryDict.Add("Extent", 59769);
        }
        
        /// <summary>Internal API</summary>
        public Token() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Token(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, ThousandsRoads.Token.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Token(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, ThousandsRoads.Token.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property SocialId
        /// </summary>
        public virtual string SocialId {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("SocialId", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("SocialId", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Tokentype
        /// </summary>
        public virtual System.Nullable<long> Tokentype {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Tokentype", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Tokentype", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property User
        /// </summary>
        public virtual ThousandsRoads.Customer User {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(ThousandsRoads.Customer));
                        this.GetPropertyS("User", mtdSignature);
                        return ((ThousandsRoads.Customer)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("User", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static ThousandsRoads.Token IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(ThousandsRoads.Token));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((ThousandsRoads.Token)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method SocialIdDisplayToLogical
        /// </summary>
        public static string SocialIdDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "SocialIdDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method SocialIdIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SocialIdIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "SocialIdIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method SocialIdLogicalToDisplay
        /// </summary>
        public static string SocialIdLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "SocialIdLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TokentypeDisplayToLogical
        /// </summary>
        public static System.Nullable<long> TokentypeDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "TokentypeDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TokentypeIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TokentypeIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "TokentypeIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TokentypeLogicalToDisplay
        /// </summary>
        public static string TokentypeLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "TokentypeLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserGetObject
        /// </summary>
        public virtual byte[] UserGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("UserGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method UserGetObjectId
        /// </summary>
        public virtual string UserGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("UserGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method UserIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus UserIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Token.RunClassMethodS(conn, ThousandsRoads.Token.ServerClassName, "UserIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus UserSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("UserSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method UserSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus UserSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("UserSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call ThousandsRoads.Token_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Token Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Token)(conn.OpenProxyObj(ThousandsRoads.Token.ServerClassName, id, concurrency, typeof(ThousandsRoads.Token), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Token Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Token)(conn.OpenProxyObj(ThousandsRoads.Token.ServerClassName, id, typeof(ThousandsRoads.Token), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Token Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Token)(conn.OpenProxyObj(ThousandsRoads.Token.ServerClassName, id, typeof(ThousandsRoads.Token))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Token Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Token)(conn.OpenProxyObj(ThousandsRoads.Token.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Token), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Token OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Token)(conn.OpenProxyObj(ThousandsRoads.Token.ServerClassName, id, concurrency, typeof(ThousandsRoads.Token), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Token OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Token)(conn.OpenProxyObj(ThousandsRoads.Token.ServerClassName, id, typeof(ThousandsRoads.Token), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Token OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Token)(conn.OpenProxyObj(ThousandsRoads.Token.ServerClassName, id, typeof(ThousandsRoads.Token))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Token OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Token)(conn.OpenProxyObj(ThousandsRoads.Token.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Token), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Token.ExistsIdInternal(conn, ThousandsRoads.Token.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Token.DeleteIdInternal(conn, ThousandsRoads.Token.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return ThousandsRoads.Token.KillExtentInternal(conn, ThousandsRoads.Token.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(ThousandsRoads.Token.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            ThousandsRoads.Token.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(ThousandsRoads.Token.ServerClassName);
            if (metaInfo.Validate(ThousandsRoads.Token.ClassCheckSum, ThousandsRoads.Token.PropertyInfoColn, ThousandsRoads.Token.CheckSumMethodDict, ThousandsRoads.Token.CheckSumQueryDict, ThousandsRoads.Token.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            ThousandsRoads.Token.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((ThousandsRoads.Token.AllPropertiesInfoColn != null)) {
                return ThousandsRoads.Token.AllPropertiesInfoColn;
            }
            ThousandsRoads.Token.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(ThousandsRoads.Token.PropertyInfoColn);
            return ThousandsRoads.Token.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return ThousandsRoads.Token.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace ThousandsRoads {
    
    
    /// <summary>
    /// Projection of class ThousandsRoads.Travel
    /// </summary>
    public partial class Travel : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "ThousandsRoads.Travel";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 14993;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(43);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(12);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Travel() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("ThousandsRoads.Travel", typeof(Travel));
            ;
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Capacity", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Direction", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("DriverId", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Enddate", InterSystems.Data.CacheTypes.ClientTypeId.tDate, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 55874));
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Endpoint", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Luggage", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("MapPoints", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfObj, 31456));
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Mapsnapshot", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Startdate", InterSystems.Data.CacheTypes.ClientTypeId.tDate, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22998));
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Startpoint", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 22661));
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Starttime", InterSystems.Data.CacheTypes.ClientTypeId.tTime, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 33016));
            ThousandsRoads.Travel.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Travelers", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfObj, 55132));
            ;
            ThousandsRoads.Travel.CheckSumMethodDict.Add("%ComposeOid", 26212);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("%DeleteExtent", 16541);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("%IsA", 55457);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("%SaveIndices", 40887);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("CapacityDisplayToLogical", 50961);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("CapacityIsValid", 31698);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("CapacityLogicalToDisplay", 58023);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("DirectionDisplayToLogical", 50961);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("DirectionIsValid", 31698);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("DirectionLogicalToDisplay", 58023);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("DriverIdDisplayToLogical", 50961);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("DriverIdIsValid", 31698);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("DriverIdLogicalToDisplay", 58023);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("EnddateDisplayToLogical", 46780);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("EnddateIsValid", 31698);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("EnddateLogicalToDisplay", 33171);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("EndpointDisplayToLogical", 5545);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("EndpointIsValid", 31698);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("EndpointLogicalToDisplay", 5545);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("IDKEYDelete", 22132);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("IDKEYExists", 25395);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("IDKEYOpen", 41976);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("LuggageDisplayToLogical", 50961);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("LuggageIsValid", 31698);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("LuggageLogicalToDisplay", 58023);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("MapPointsGetObject", 64492);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("MapPointsGetObjectId", 17297);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("MapPointsIsValid", 57396);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("MapsnapshotDisplayToLogical", 5545);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("MapsnapshotIsValid", 31698);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("MapsnapshotLogicalToDisplay", 5545);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("StartdateDisplayToLogical", 46780);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("StartdateLogicalToDisplay", 33171);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("StartpointDisplayToLogical", 5545);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("StartpointIsValid", 31698);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("StartpointLogicalToDisplay", 5545);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("StarttimeDisplayToLogical", 12059);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("StarttimeIsValid", 31698);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("StarttimeLogicalToDisplay", 18577);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("TravelersGetObject", 64492);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("TravelersGetObjectId", 17297);
            ThousandsRoads.Travel.CheckSumMethodDict.Add("TravelersIsValid", 57396);
            ;
            ThousandsRoads.Travel.CheckSumQueryDict.Add("Extent", 65185);
        }
        
        /// <summary>Internal API</summary>
        public Travel() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Travel(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, ThousandsRoads.Travel.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Travel(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, ThousandsRoads.Travel.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Capacity
        /// </summary>
        public virtual System.Nullable<long> Capacity {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Capacity", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Capacity", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Direction
        /// </summary>
        public virtual System.Nullable<long> Direction {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Direction", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Direction", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property DriverId
        /// </summary>
        public virtual System.Nullable<long> DriverId {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("DriverId", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("DriverId", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Enddate
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheDate Enddate {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                        this.GetPropertyS("Enddate", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                        this.SetPropertyS("Enddate", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Endpoint
        /// </summary>
        public virtual string Endpoint {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Endpoint", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Endpoint", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Luggage
        /// </summary>
        public virtual System.Nullable<long> Luggage {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Luggage", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Luggage", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property MapPoints
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfObjects MapPoints {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheListOfObjects));
                        this.GetPropertyS("MapPoints", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfObjects)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("MapPoints", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Mapsnapshot
        /// </summary>
        public virtual string Mapsnapshot {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Mapsnapshot", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Mapsnapshot", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Startdate
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheDate Startdate {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                        this.GetPropertyS("Startdate", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                        this.SetPropertyS("Startdate", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Startpoint
        /// </summary>
        public virtual string Startpoint {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Startpoint", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Startpoint", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Starttime
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheTime Starttime {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tTime);
                        this.GetPropertyS("Starttime", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheTimeReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Starttime", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Travelers
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfObjects Travelers {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheListOfObjects));
                        this.GetPropertyS("Travelers", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfObjects)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Travelers", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CapacityDisplayToLogical
        /// </summary>
        public static System.Nullable<long> CapacityDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "CapacityDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CapacityIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus CapacityIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "CapacityIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CapacityLogicalToDisplay
        /// </summary>
        public static string CapacityLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "CapacityLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DirectionDisplayToLogical
        /// </summary>
        public static System.Nullable<long> DirectionDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "DirectionDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DirectionIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DirectionIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "DirectionIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DirectionLogicalToDisplay
        /// </summary>
        public static string DirectionLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "DirectionLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DriverIdDisplayToLogical
        /// </summary>
        public static System.Nullable<long> DriverIdDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "DriverIdDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DriverIdIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DriverIdIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "DriverIdIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DriverIdLogicalToDisplay
        /// </summary>
        public static string DriverIdLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "DriverIdLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EnddateDisplayToLogical
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheDate EnddateDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "EnddateDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EnddateIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus EnddateIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "EnddateIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EnddateLogicalToDisplay
        /// </summary>
        public static string EnddateLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, InterSystems.Data.CacheTypes.CacheDate _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "EnddateLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EndpointDisplayToLogical
        /// </summary>
        public static string EndpointDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "EndpointDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EndpointIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus EndpointIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "EndpointIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method EndpointLogicalToDisplay
        /// </summary>
        public static string EndpointLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "EndpointLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static ThousandsRoads.Travel IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(ThousandsRoads.Travel));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((ThousandsRoads.Travel)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LuggageDisplayToLogical
        /// </summary>
        public static System.Nullable<long> LuggageDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "LuggageDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LuggageIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus LuggageIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "LuggageIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LuggageLogicalToDisplay
        /// </summary>
        public static string LuggageLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "LuggageLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MapPointsGetObject
        /// </summary>
        public virtual byte[] MapPointsGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("MapPointsGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method MapPointsGetObjectId
        /// </summary>
        public virtual string MapPointsGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("MapPointsGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method MapPointsIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus MapPointsIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "MapPointsIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MapsnapshotDisplayToLogical
        /// </summary>
        public static string MapsnapshotDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "MapsnapshotDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MapsnapshotIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus MapsnapshotIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "MapsnapshotIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MapsnapshotLogicalToDisplay
        /// </summary>
        public static string MapsnapshotLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "MapsnapshotLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StartdateDisplayToLogical
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheDate StartdateDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "StartdateDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StartdateLogicalToDisplay
        /// </summary>
        public static string StartdateLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, InterSystems.Data.CacheTypes.CacheDate _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "StartdateLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StartpointDisplayToLogical
        /// </summary>
        public static string StartpointDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "StartpointDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StartpointIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus StartpointIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "StartpointIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StartpointLogicalToDisplay
        /// </summary>
        public static string StartpointLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "StartpointLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StarttimeDisplayToLogical
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheTime StarttimeDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tTime);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "StarttimeDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheTimeReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StarttimeIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus StarttimeIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "StarttimeIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method StarttimeLogicalToDisplay
        /// </summary>
        public static string StarttimeLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, InterSystems.Data.CacheTypes.CacheTime _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "StarttimeLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TravelersGetObject
        /// </summary>
        public virtual byte[] TravelersGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TravelersGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelersGetObjectId
        /// </summary>
        public virtual string TravelersGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TravelersGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelersIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TravelersIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Travel.RunClassMethodS(conn, ThousandsRoads.Travel.ServerClassName, "TravelersIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call ThousandsRoads.Travel_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Travel Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Travel)(conn.OpenProxyObj(ThousandsRoads.Travel.ServerClassName, id, concurrency, typeof(ThousandsRoads.Travel), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Travel Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Travel)(conn.OpenProxyObj(ThousandsRoads.Travel.ServerClassName, id, typeof(ThousandsRoads.Travel), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Travel Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Travel)(conn.OpenProxyObj(ThousandsRoads.Travel.ServerClassName, id, typeof(ThousandsRoads.Travel))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Travel Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Travel)(conn.OpenProxyObj(ThousandsRoads.Travel.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Travel), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Travel OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Travel)(conn.OpenProxyObj(ThousandsRoads.Travel.ServerClassName, id, concurrency, typeof(ThousandsRoads.Travel), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Travel OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Travel)(conn.OpenProxyObj(ThousandsRoads.Travel.ServerClassName, id, typeof(ThousandsRoads.Travel), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Travel OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Travel)(conn.OpenProxyObj(ThousandsRoads.Travel.ServerClassName, id, typeof(ThousandsRoads.Travel))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Travel OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Travel)(conn.OpenProxyObj(ThousandsRoads.Travel.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Travel), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Travel.ExistsIdInternal(conn, ThousandsRoads.Travel.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Travel.DeleteIdInternal(conn, ThousandsRoads.Travel.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return ThousandsRoads.Travel.KillExtentInternal(conn, ThousandsRoads.Travel.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(ThousandsRoads.Travel.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            ThousandsRoads.Travel.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(ThousandsRoads.Travel.ServerClassName);
            if (metaInfo.Validate(ThousandsRoads.Travel.ClassCheckSum, ThousandsRoads.Travel.PropertyInfoColn, ThousandsRoads.Travel.CheckSumMethodDict, ThousandsRoads.Travel.CheckSumQueryDict, ThousandsRoads.Travel.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            ThousandsRoads.Travel.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((ThousandsRoads.Travel.AllPropertiesInfoColn != null)) {
                return ThousandsRoads.Travel.AllPropertiesInfoColn;
            }
            ThousandsRoads.Travel.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(ThousandsRoads.Travel.PropertyInfoColn);
            return ThousandsRoads.Travel.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return ThousandsRoads.Travel.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace ThousandsRoads {
    
    
    /// <summary>
    /// Projection of class ThousandsRoads.Traveler
    /// </summary>
    public partial class Traveler : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "ThousandsRoads.Traveler";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 14993;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(21);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(3);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Traveler() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("ThousandsRoads.Traveler", typeof(Traveler));
            ;
            ThousandsRoads.Traveler.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("CustomerType", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1399));
            ThousandsRoads.Traveler.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Travel", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 36000));
            ThousandsRoads.Traveler.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("User", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 27386));
            ;
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("%ComposeOid", 26212);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("%DeleteExtent", 16541);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("%IsA", 55457);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("%SaveIndices", 40887);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("CustomerTypeDisplayToLogical", 50961);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("CustomerTypeIsValid", 31698);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("CustomerTypeLogicalToDisplay", 58023);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("IDKEYDelete", 22132);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("IDKEYExists", 25395);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("IDKEYOpen", 61688);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("TravelGetObject", 64492);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("TravelGetObjectId", 17297);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("TravelIsValid", 57396);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("TravelSetObject", 32506);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("TravelSetObjectId", 50028);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("UserGetObject", 64492);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("UserGetObjectId", 17297);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("UserIsValid", 57396);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("UserSetObject", 32506);
            ThousandsRoads.Traveler.CheckSumMethodDict.Add("UserSetObjectId", 50028);
            ;
            ThousandsRoads.Traveler.CheckSumQueryDict.Add("Extent", 5390);
        }
        
        /// <summary>Internal API</summary>
        public Traveler() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Traveler(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, ThousandsRoads.Traveler.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Traveler(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, ThousandsRoads.Traveler.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property CustomerType
        /// </summary>
        public virtual System.Nullable<long> CustomerType {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("CustomerType", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("CustomerType", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Travel
        /// </summary>
        public virtual ThousandsRoads.Travel Travel {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(ThousandsRoads.Travel));
                        this.GetPropertyS("Travel", mtdSignature);
                        return ((ThousandsRoads.Travel)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Travel", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property User
        /// </summary>
        public virtual ThousandsRoads.Customer User {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(ThousandsRoads.Customer));
                        this.GetPropertyS("User", mtdSignature);
                        return ((ThousandsRoads.Customer)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("User", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pOID, false);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerTypeDisplayToLogical
        /// </summary>
        public static System.Nullable<long> CustomerTypeDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "CustomerTypeDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerTypeIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus CustomerTypeIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "CustomerTypeIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method CustomerTypeLogicalToDisplay
        /// </summary>
        public static string CustomerTypeLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "CustomerTypeLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static ThousandsRoads.Traveler IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(ThousandsRoads.Traveler));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((ThousandsRoads.Traveler)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TravelGetObject
        /// </summary>
        public virtual byte[] TravelGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TravelGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelGetObjectId
        /// </summary>
        public virtual string TravelGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("TravelGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TravelIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "TravelIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TravelSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus TravelSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("TravelSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TravelSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus TravelSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("TravelSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method UserGetObject
        /// </summary>
        public virtual byte[] UserGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBinary);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("UserGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method UserGetObjectId
        /// </summary>
        public virtual string UserGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("UserGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method UserIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus UserIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(value, false);
                    ThousandsRoads.Traveler.RunClassMethodS(conn, ThousandsRoads.Traveler.ServerClassName, "UserIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus UserSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("UserSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method UserSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus UserSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("UserSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call ThousandsRoads.Traveler_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Traveler Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Traveler)(conn.OpenProxyObj(ThousandsRoads.Traveler.ServerClassName, id, concurrency, typeof(ThousandsRoads.Traveler), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Traveler Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Traveler)(conn.OpenProxyObj(ThousandsRoads.Traveler.ServerClassName, id, typeof(ThousandsRoads.Traveler), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Traveler Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Traveler)(conn.OpenProxyObj(ThousandsRoads.Traveler.ServerClassName, id, typeof(ThousandsRoads.Traveler))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static ThousandsRoads.Traveler Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Traveler)(conn.OpenProxyObj(ThousandsRoads.Traveler.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Traveler), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Traveler OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Traveler)(conn.OpenProxyObj(ThousandsRoads.Traveler.ServerClassName, id, concurrency, typeof(ThousandsRoads.Traveler), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Traveler OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Traveler)(conn.OpenProxyObj(ThousandsRoads.Traveler.ServerClassName, id, typeof(ThousandsRoads.Traveler), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Traveler OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Traveler)(conn.OpenProxyObj(ThousandsRoads.Traveler.ServerClassName, id, typeof(ThousandsRoads.Traveler))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static ThousandsRoads.Traveler OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((ThousandsRoads.Traveler)(conn.OpenProxyObj(ThousandsRoads.Traveler.ServerClassName, id, concurrency, timeout, typeof(ThousandsRoads.Traveler), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Traveler.ExistsIdInternal(conn, ThousandsRoads.Traveler.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return ThousandsRoads.Traveler.DeleteIdInternal(conn, ThousandsRoads.Traveler.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return ThousandsRoads.Traveler.KillExtentInternal(conn, ThousandsRoads.Traveler.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(ThousandsRoads.Traveler.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            ThousandsRoads.Traveler.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(ThousandsRoads.Traveler.ServerClassName);
            if (metaInfo.Validate(ThousandsRoads.Traveler.ClassCheckSum, ThousandsRoads.Traveler.PropertyInfoColn, ThousandsRoads.Traveler.CheckSumMethodDict, ThousandsRoads.Traveler.CheckSumQueryDict, ThousandsRoads.Traveler.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            ThousandsRoads.Traveler.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((ThousandsRoads.Traveler.AllPropertiesInfoColn != null)) {
                return ThousandsRoads.Traveler.AllPropertiesInfoColn;
            }
            ThousandsRoads.Traveler.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(ThousandsRoads.Traveler.PropertyInfoColn);
            return ThousandsRoads.Traveler.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return ThousandsRoads.Traveler.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
